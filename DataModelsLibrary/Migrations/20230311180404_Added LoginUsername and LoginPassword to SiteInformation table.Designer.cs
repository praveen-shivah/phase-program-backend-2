// <auto-generated />
using System;
using DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DataModelsLibrary.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230311180404_Added LoginUsername and LoginPassword to SiteInformation table")]
    partial class AddedLoginUsernameandLoginPasswordtoSiteInformationtable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DatabaseContext.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CityId")
                        .HasColumnType("integer");

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("PostalCodeId")
                        .HasColumnType("integer");

                    b.Property<int>("StateProvinceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CityId" }, "IX_Address_CityId");

                    b.HasIndex(new[] { "ContactId" }, "IX_Address_ContactId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Address_OrganizationId");

                    b.HasIndex(new[] { "PostalCodeId" }, "IX_Address_PostalCodeId");

                    b.HasIndex(new[] { "StateProvinceId" }, "IX_Address_StateProvinceId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("DatabaseContext.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_City_OrganizationId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("DatabaseContext.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("First")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Last")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MiddleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int?>("ResellerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Contact_OrganizationId");

                    b.HasIndex(new[] { "ResellerId" }, "IX_Contact_ResellerId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("DatabaseContext.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Country_OrganizationId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DatabaseContext.ErrorLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClassName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(LOCALTIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("LogClassId")
                        .HasColumnType("integer");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MethodName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("StackTrace")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Hash", "CreatedOn" }, "IX_ErrorLog_Hash");

                    b.ToTable("ErrorLog");
                });

            modelBuilder.Entity("DatabaseContext.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<double>("Balance")
                        .HasColumnType("double precision");

                    b.Property<string>("BalanceFormatted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedDate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreatedDateFormatted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InvoiceUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("ResellerId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StatusFormatted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Invoice_OrganizationId");

                    b.HasIndex(new[] { "ResellerId" }, "IX_Invoice_ResellerId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("DatabaseContext.InvoiceLineItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeProcessStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<string>("SoftwareType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_InvoiceLineItem_InvoiceId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_InvoiceLineItem_OrganizationId");

                    b.ToTable("InvoiceLineItem");
                });

            modelBuilder.Entity("DatabaseContext.InvoiceRevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("InvoiceId1")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Invoice_Id");

                    b.Property<string>("Json")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("ResellerId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "InvoiceId" }, "IX_InvoiceRevision_InvoiceId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_InvoiceRevision_OrganizationId");

                    b.ToTable("InvoiceRevision");
                });

            modelBuilder.Entity("DatabaseContext.Organization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Apikey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("APIKey");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("URL");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organization");
                });

            modelBuilder.Entity("DatabaseContext.PhoneNumber", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ContactId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "ContactId" }, "IX_PhoneNumber_ContactId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_PhoneNumber_OrganizationId");

                    b.ToTable("PhoneNumber");
                });

            modelBuilder.Entity("DatabaseContext.PostalCode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_PostalCode_CountryId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_PostalCode_OrganizationId");

                    b.ToTable("PostalCode");
                });

            modelBuilder.Entity("DatabaseContext.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedByIp")
                        .HasColumnType("text");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReasonRevoked")
                        .HasColumnType("text");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .HasColumnType("text");

                    b.Property<int?>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_RefreshToken_UserId");

                    b.ToTable("RefreshToken");
                });

            modelBuilder.Entity("DatabaseContext.Reseller", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_Reseller_OrganizationId");

                    b.ToTable("Reseller");
                });

            modelBuilder.Entity("DatabaseContext.SignificantEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("(LOCALTIMESTAMP AT TIME ZONE 'UTC'::text)");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("integer");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Id", "ShortDescription", "CreatedBy", "EventTypeId", "CreatedOn" }, "IX_SignificantEvent_EventId_CreatedOn");

                    b.ToTable("SignificantEvent");
                });

            modelBuilder.Entity("DatabaseContext.SignificantEventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("SignificantEventType");
                });

            modelBuilder.Entity("DatabaseContext.SiteInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Balance")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Item_Id");

                    b.Property<string>("LoginPassword")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<string>("LoginUsername")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValueSql("''::character varying");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<int>("ResellerId")
                        .HasColumnType("integer");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("URL");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_SiteInformation_OrganizationId");

                    b.HasIndex(new[] { "ResellerId" }, "IX_SiteInformation_ResellerId");

                    b.HasIndex(new[] { "VendorId" }, "IX_SiteInformation_VendorId");

                    b.ToTable("SiteInformation");
                });

            modelBuilder.Entity("DatabaseContext.SoftwareType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SoftwareType");
                });

            modelBuilder.Entity("DatabaseContext.StateProvince", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CountryId" }, "IX_StateProvince_CountryId");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_StateProvince_OrganizationId");

                    b.ToTable("StateProvince");
                });

            modelBuilder.Entity("DatabaseContext.TransferPointsQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Apikey")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("APIKey");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeProcessStarted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeSent")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InvoiceLineItemId")
                        .HasColumnType("integer");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValueSql("''::text");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<int>("SoftwareType")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_TransferPointsQueue_OrganizationId");

                    b.ToTable("TransferPointsQueue");
                });

            modelBuilder.Entity("DatabaseContext.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CurrentRefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_User_OrganizationId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("DatabaseContext.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("SoftwareTypeId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SoftwareTypeId" }, "IX_Vendor_SoftwareTypeId");

                    b.ToTable("Vendor");
                });

            modelBuilder.Entity("DatabaseContext.VendorCredentialsByOrganizations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("OrganizationId")
                        .HasColumnType("integer");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("VendorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "OrganizationId" }, "IX_VendorCredentialsByOrganizations_OrganizationId");

                    b.HasIndex(new[] { "VendorId" }, "IX_VendorCredentialsByOrganizations_VendorId");

                    b.ToTable("VendorCredentialsByOrganizations");
                });

            modelBuilder.Entity("DatabaseContext.Address", b =>
                {
                    b.HasOne("DatabaseContext.City", "City")
                        .WithMany("Address")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Contact", "Contact")
                        .WithMany("Address")
                        .HasForeignKey("ContactId");

                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("Address")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.PostalCode", "PostalCode")
                        .WithMany("Address")
                        .HasForeignKey("PostalCodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.StateProvince", "StateProvince")
                        .WithMany("Address")
                        .HasForeignKey("StateProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Contact");

                    b.Navigation("Organization");

                    b.Navigation("PostalCode");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("DatabaseContext.City", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("City")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.Contact", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("Contact")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Reseller", "Reseller")
                        .WithMany("Contact")
                        .HasForeignKey("ResellerId");

                    b.Navigation("Organization");

                    b.Navigation("Reseller");
                });

            modelBuilder.Entity("DatabaseContext.Country", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("Country")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.Invoice", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("Invoice")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Reseller", "Reseller")
                        .WithMany("Invoice")
                        .HasForeignKey("ResellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Reseller");
                });

            modelBuilder.Entity("DatabaseContext.InvoiceLineItem", b =>
                {
                    b.HasOne("DatabaseContext.Invoice", "Invoice")
                        .WithMany("InvoiceLineItem")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("InvoiceLineItem")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.InvoiceRevision", b =>
                {
                    b.HasOne("DatabaseContext.Invoice", "Invoice")
                        .WithMany("InvoiceRevision")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("InvoiceRevision")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.PhoneNumber", b =>
                {
                    b.HasOne("DatabaseContext.Contact", "Contact")
                        .WithMany("PhoneNumber")
                        .HasForeignKey("ContactId");

                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("PhoneNumber")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.PostalCode", b =>
                {
                    b.HasOne("DatabaseContext.Country", "Country")
                        .WithMany("PostalCode")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("PostalCode")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.RefreshToken", b =>
                {
                    b.HasOne("DatabaseContext.User", "User")
                        .WithMany("RefreshToken")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DatabaseContext.Reseller", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("Reseller")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.SiteInformation", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("SiteInformation")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Reseller", "Reseller")
                        .WithMany("SiteInformation")
                        .HasForeignKey("ResellerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Vendor", "Vendor")
                        .WithMany("SiteInformation")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Reseller");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("DatabaseContext.StateProvince", b =>
                {
                    b.HasOne("DatabaseContext.Country", "Country")
                        .WithMany("StateProvince")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("StateProvince")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.TransferPointsQueue", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("TransferPointsQueue")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.User", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("User")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DatabaseContext.Vendor", b =>
                {
                    b.HasOne("DatabaseContext.SoftwareType", "SoftwareType")
                        .WithMany("Vendor")
                        .HasForeignKey("SoftwareTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SoftwareType");
                });

            modelBuilder.Entity("DatabaseContext.VendorCredentialsByOrganizations", b =>
                {
                    b.HasOne("DatabaseContext.Organization", "Organization")
                        .WithMany("VendorCredentialsByOrganizations")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DatabaseContext.Vendor", "Vendor")
                        .WithMany("VendorCredentialsByOrganizations")
                        .HasForeignKey("VendorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("DatabaseContext.City", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("DatabaseContext.Contact", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("PhoneNumber");
                });

            modelBuilder.Entity("DatabaseContext.Country", b =>
                {
                    b.Navigation("PostalCode");

                    b.Navigation("StateProvince");
                });

            modelBuilder.Entity("DatabaseContext.Invoice", b =>
                {
                    b.Navigation("InvoiceLineItem");

                    b.Navigation("InvoiceRevision");
                });

            modelBuilder.Entity("DatabaseContext.Organization", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("City");

                    b.Navigation("Contact");

                    b.Navigation("Country");

                    b.Navigation("Invoice");

                    b.Navigation("InvoiceLineItem");

                    b.Navigation("InvoiceRevision");

                    b.Navigation("PhoneNumber");

                    b.Navigation("PostalCode");

                    b.Navigation("Reseller");

                    b.Navigation("SiteInformation");

                    b.Navigation("StateProvince");

                    b.Navigation("TransferPointsQueue");

                    b.Navigation("User");

                    b.Navigation("VendorCredentialsByOrganizations");
                });

            modelBuilder.Entity("DatabaseContext.PostalCode", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("DatabaseContext.Reseller", b =>
                {
                    b.Navigation("Contact");

                    b.Navigation("Invoice");

                    b.Navigation("SiteInformation");
                });

            modelBuilder.Entity("DatabaseContext.SoftwareType", b =>
                {
                    b.Navigation("Vendor");
                });

            modelBuilder.Entity("DatabaseContext.StateProvince", b =>
                {
                    b.Navigation("Address");
                });

            modelBuilder.Entity("DatabaseContext.User", b =>
                {
                    b.Navigation("RefreshToken");
                });

            modelBuilder.Entity("DatabaseContext.Vendor", b =>
                {
                    b.Navigation("SiteInformation");

                    b.Navigation("VendorCredentialsByOrganizations");
                });
#pragma warning restore 612, 618
        }
    }
}
